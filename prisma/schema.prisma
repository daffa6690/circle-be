generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  username String @unique
  email     String @unique
  password   String

  profile Profile?
  threads Thread[]
  likes Like[]
  replies Reply[]
  followers Follow[] @relation("followerUser")
  followings Follow[] @relation("followingUser")
 
 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())

 @@map("users")
}

model Profile {
  id       String    @id @default(uuid())
 
  fullname String
  
  avatarUrl String?
  bannerUrl String?
  bio String?
 
 user User @relation(fields:[userId], references:[id],onDelete:Cascade)
 userId String @unique

 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())

 @@map("profile")
}

model Thread {
id       String    @id @default(uuid())

content String?
images String?

user User @relation( fields: [userId] , references: [id])
userId String
likes Like[]
replies Reply[]

 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())

@@map("threads")
}

model Follow {
id       String    @id @default(uuid())

follower User @relation(name: "followerUser",fields:[followedId],references:[id])
followedId String

following User @relation(name:"followingUser",fields:[followingId],references:[id])
followingId String

createdAt DateTime @default(now())
 updatedAt DateTime @default(now())

@@map("follows") 
}

model Like{
  id String  @id @default(uuid())

  thread Thread? @relation(fields: [threadId],references:[id],onDelete: Cascade)
  threadId String?

  reply Reply? @relation(fields:[replyId],references:[id],onDelete:Cascade)
  replyId String?

  user User @relation(fields:[userId],references:[id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("likes")
}
model Reply{
  id String  @id @default(uuid())

  content String

  thread Thread @relation(fields: [threadId],references:[id],onDelete: Cascade)
  threadId String

  likes Like[]

  user User @relation(fields:[userId],references:[id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("replies")
}